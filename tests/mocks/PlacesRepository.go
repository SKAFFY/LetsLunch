// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	gatheringPlace "cmd/app/entities/gatheringPlace"
	context "context"

	mock "github.com/stretchr/testify/mock"

	query "cmd/app/entities/gatheringPlace/query"

	uuid "github.com/gofrs/uuid/v5"
)

// PlacesRepository is an autogenerated mock type for the PlacesRepository type
type PlacesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, place
func (_m *PlacesRepository) Create(ctx context.Context, place *gatheringPlace.GatheringPlace) (*gatheringPlace.GatheringPlace, error) {
	ret := _m.Called(ctx, place)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *gatheringPlace.GatheringPlace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gatheringPlace.GatheringPlace) (*gatheringPlace.GatheringPlace, error)); ok {
		return rf(ctx, place)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gatheringPlace.GatheringPlace) *gatheringPlace.GatheringPlace); ok {
		r0 = rf(ctx, place)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatheringPlace.GatheringPlace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gatheringPlace.GatheringPlace) error); ok {
		r1 = rf(ctx, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, place
func (_m *PlacesRepository) Delete(ctx context.Context, place *gatheringPlace.GatheringPlace) error {
	ret := _m.Called(ctx, place)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gatheringPlace.GatheringPlace) error); ok {
		r0 = rf(ctx, place)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCriteria provides a mock function with given fields: ctx, criteria
func (_m *PlacesRepository) FindByCriteria(ctx context.Context, criteria query.FindCriteria) ([]gatheringPlace.GatheringPlace, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for FindByCriteria")
	}

	var r0 []gatheringPlace.GatheringPlace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.FindCriteria) ([]gatheringPlace.GatheringPlace, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.FindCriteria) []gatheringPlace.GatheringPlace); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gatheringPlace.GatheringPlace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.FindCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *PlacesRepository) FindByID(ctx context.Context, id uuid.UUID) (*gatheringPlace.GatheringPlace, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *gatheringPlace.GatheringPlace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*gatheringPlace.GatheringPlace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *gatheringPlace.GatheringPlace); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatheringPlace.GatheringPlace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, place
func (_m *PlacesRepository) Update(ctx context.Context, place *gatheringPlace.GatheringPlace) (*gatheringPlace.GatheringPlace, error) {
	ret := _m.Called(ctx, place)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *gatheringPlace.GatheringPlace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gatheringPlace.GatheringPlace) (*gatheringPlace.GatheringPlace, error)); ok {
		return rf(ctx, place)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gatheringPlace.GatheringPlace) *gatheringPlace.GatheringPlace); ok {
		r0 = rf(ctx, place)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gatheringPlace.GatheringPlace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gatheringPlace.GatheringPlace) error); ok {
		r1 = rf(ctx, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlacesRepository creates a new instance of PlacesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlacesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlacesRepository {
	mock := &PlacesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
